[{"path":"index.html","id":"willkommen","chapter":"Willkommen","heading":"Willkommen","text":"Dieses Skript entstand (und entsteht) aus meinen Lehrveranstaltungen rund um das Thema Data Science & Machine Learning. Die Inhalte richten sich Studierende, die erste Schritte auf das KI -Spielfeld wagen und das Potential von datengetriebenen Lösungsverfahren verstehen wollen.Insofern richtet sich die Darstellung Studierende mit vertieftem Interesse KI, die einen für Studierende angemessenes Vorwissen im Bereich Mathematik mitbringen. Vorkenntnisse im Bereich der Programmierung sind nicht nötig, aber natürlich hilfreich.Ich habe mich bemüht, zahlreiche Übungsbeispiele und Youtube-Videos einzubauen. Viele Themen lassen sich besser darstellen. Sofern es Medien im Netz gibt, die die Sachverhalte gut darstellen, werde ich entsprechenden Links einbauen. Der Autor muss ja nicht der Meinung sein, alles besser zu können. Gleichwohl darf dadurch der rote Faden nicht verloren gehen.","code":""},{"path":"index.html","id":"vorbereitungen","chapter":"Willkommen","heading":"0.1 Vorbereitungen","text":"Dieses Skript ist als Unterlage für zahlreichen praktische Übungen mit Python angelegt. Ich werde hierzu Colab-Notebooks verwenden. Sie brauchen hierzu ein Google-Konto.Noch einige Hinweise Studierende meiner Module:Die folgende Youtube-Playlist kann zur Vertiefung einzelner Stoffteile nutzen: Youtube PlaylistWenige Passagen diesem Skript sind eventuell englischer Sprache gehalten.Dieses Skript\nbefindet sich Teilen im Aufbau, leichte Fehler sind also möglich (und wahrscheinlich - für Hinweise bin ich dankbar)\ngeht nach der Prüfung -line\nbefindet sich Teilen im Aufbau, leichte Fehler sind also möglich (und wahrscheinlich - für Hinweise bin ich dankbar)geht nach der Prüfung -line","code":""},{"path":"python---quickstart.html","id":"python---quickstart","chapter":"1 Python - Quickstart","heading":"1 Python - Quickstart","text":"","code":""},{"path":"python---quickstart.html","id":"colab-notebooks","chapter":"1 Python - Quickstart","heading":"1.1 Colab-Notebooks","text":"","code":""},{"path":"python---quickstart.html","id":"hallo-welt","chapter":"1 Python - Quickstart","heading":"1.2 Hallo Welt","text":"Ausgabe:","code":"print(\"Hallo Welt\")#> Hallo Welt"},{"path":"python---quickstart.html","id":"variablen","chapter":"1 Python - Quickstart","heading":"1.3 Variablen","text":"Variablen sind Platzhalter für Werte, wir sprechen vom Wert einer Variable. Im nachfolgendem Beispiel wird der Variable mit dem Namen xin Zeile 1 der Wert 1 zugewiesen. Variablen haben immer einen Namen. Einen Wert erhalten sie erst durch eine sog. Zuweisung (wie Zeile 1). Zeile 2 drucken wir den Wert aus. Führen Sie also folgende Phython-Befehle aus:Die erstmalige Zuweisung eines Wertes eine Variable heißt Initialisierung.","code":"x = 1\nprint(x)"},{"path":"python---quickstart.html","id":"datentypen","chapter":"1 Python - Quickstart","heading":"1.4 Datentypen","text":"","code":""},{"path":"python---quickstart.html","id":"datentyp-zahlen","chapter":"1 Python - Quickstart","heading":"1.4.1 Datentyp “Zahlen”","text":"","code":""},{"path":"python---quickstart.html","id":"ganze-zahlen-und-rationale-zahlen","chapter":"1 Python - Quickstart","heading":"1.4.1.1 Ganze Zahlen und rationale Zahlen","text":"Zahlen sind recht einfach zu verstehen, wir haben ja oben schon einige Beispiele gesehen. Hier nochmal eine Zusammenfassung wichtiger Beispiele mit rationalen Zahlen: ","code":"a = 2\nb = 1/3\nc = 1.1\n# Funktionen\nd = a + b; print(d)\nd = a - b; print(d)\nd = a * b; print(d)\nd = a / b; print(d)"},{"path":"python---quickstart.html","id":"datentyp-strings","chapter":"1 Python - Quickstart","heading":"1.4.2 Datentyp “Strings”","text":"Zeichenketten sind ebenfalls recht einfach zu verstehen. Führen Sie folgendes Beispiel aus:","code":"vorname = \"Hans\"\nnachname = 'Huber'\nname = vorname + \", \" + nachname\nprint(name)"},{"path":"python---quickstart.html","id":"f-strings","chapter":"1 Python - Quickstart","heading":"1.4.2.1 f-Strings","text":"Statt eine zusammengesetzte Zeichenkette mit dem “+” - Operator auf zubauen, kann ein sogenannter f-String verwendet werden (siehe Zeile 3). f-Strings bringen für uns keine neue Funktion, machen aber die Verknüpfung von Strings einfacher.","code":"vorname = \"Hans\"\nnachname = 'Huber'\nname = f\"{vorname}, {nachname}\"\nprint(name)"},{"path":"python---quickstart.html","id":"datentyp-boolean","chapter":"1 Python - Quickstart","heading":"1.4.3 Datentyp “Boolean”","text":"Es gibt der Theorie unendlich viele Zahlen und Zeichenketten, aber nur zwei Wahrheitswerte: wahr oder falsch. Phython: Trueund False","code":"z1 = False;\nprint (z1)\nprint( type(z1) );\n\nz2 = 1 < 4;\nprint( z2 );\nprint( type(z2) );\n\nprint (\"z1 and z2:\", z1 and z2);\nprint (\"z1 or z2:\", z1 or z2);"},{"path":"python---quickstart.html","id":"operatoren","chapter":"1 Python - Quickstart","heading":"1.5 Operatoren","text":"Die Bildschirmabzüge dieses Kapitels sind der Webseite https://www.w3schools.com/python/python_operators.asp entnommen. Erarbeiten Sie sich die Operatoren selbst kleinen Programmen, wie wir das zu Zahlen bereits oben gemacht haben.","code":""},{"path":"python---quickstart.html","id":"arithmetische-operatoren","chapter":"1 Python - Quickstart","heading":"1.5.1 Arithmetische Operatoren","text":"bild1","code":""},{"path":"python---quickstart.html","id":"vergleichsoperatoren","chapter":"1 Python - Quickstart","heading":"1.5.2 Vergleichsoperatoren","text":"","code":""},{"path":"python---quickstart.html","id":"logische-operatoren","chapter":"1 Python - Quickstart","heading":"1.5.3 Logische Operatoren","text":"","code":""},{"path":"python---quickstart.html","id":"datentypen-in-der-übersicht","chapter":"1 Python - Quickstart","heading":"1.6 Datentypen in der Übersicht","text":"Nachfolgendes Programmstück beschreibt exemplarisch die nun bekannten Datentypen. Mit type() kann man sich den Datentyp einer Variable ausgeben lassen (oft hilfreich!)","code":"x = 1; \nprint( f\"1 : {type(x)}\")\n\nx = 1.1; \nprint( f\"1.1 : {type(x)}\")\n\nx = 4/2; \nprint( f\"4/2 : {type(x)}\")\n\nx = 'String'; \nprint( f\"'String' : {type(x)}\")\n\nx = [1,2,4]; \nprint( f\"[1,2,3] : {type(x)}\")\n\nx = (1,2);\nprint( f\"(1,2) : {type(x)}\")\n\nx = 1 < -3\nprint( f\"False : {type(x)}\")"},{"path":"python---quickstart.html","id":"zusammenfassung","chapter":"1 Python - Quickstart","heading":"1.6.1 Zusammenfassung","text":"","code":""},{"path":"daten.html","id":"daten","chapter":"2 Daten","heading":"2 Daten","text":"","code":""},{"path":"daten.html","id":"der-iris-datensatz","chapter":"2 Daten","heading":"2.1 Der Iris-Datensatz","text":"Der Iris-Datensatz enthält Messungen von jeweils 50 Blüten zu drei verschiedenen Lilien-Arten (setosa, versicolor, virginica)DownloadGemessen werden pro Blütein cm die Länge und Breite des Kronblattes (Petalum, petal) sowie die Länge und Breite des Kelchblattes (Sepalum, sepal)image (190)","code":""},{"path":"daten.html","id":"datensatz","chapter":"2 Daten","heading":"2.1.1 Datensatz","text":"Folgender - der Community wohlbekannter - Datensatz liegt uns vor (Sie finden die Daten hier).Iris-Datensatz","code":""},{"path":"daten.html","id":"datentypen-1","chapter":"2 Daten","heading":"2.2 Datentypen","text":"","code":""},{"path":"daten.html","id":"elementare-datentypen","chapter":"2 Daten","heading":"2.2.1 Elementare Datentypen","text":"","code":""},{"path":"daten.html","id":"zahlen","chapter":"2 Daten","heading":"2.2.1.1 Zahlen","text":"","code":""},{"path":"daten.html","id":"strings","chapter":"2 Daten","heading":"2.2.1.2 Strings","text":"","code":""},{"path":"daten.html","id":"logische-werte","chapter":"2 Daten","heading":"2.2.1.3 Logische Werte","text":"","code":""},{"path":"daten.html","id":"elementare-datentypen-in-python","chapter":"2 Daten","heading":"2.2.1.4 Elementare Datentypen in Python","text":"","code":""},{"path":"daten.html","id":"komplexe-datentypen","chapter":"2 Daten","heading":"2.2.2 Komplexe Datentypen","text":"","code":""},{"path":"daten.html","id":"datum","chapter":"2 Daten","heading":"2.2.2.1 Datum","text":"","code":""},{"path":"daten.html","id":"uhrzeit","chapter":"2 Daten","heading":"2.2.2.2 Uhrzeit","text":"","code":""},{"path":"daten.html","id":"bilder","chapter":"2 Daten","heading":"2.2.2.3 Bilder","text":"","code":""},{"path":"daten.html","id":"komplexe-datentypen-in-python","chapter":"2 Daten","heading":"2.2.2.4 Komplexe Datentypen in Python","text":"","code":""},{"path":"daten.html","id":"skalenniveaus","chapter":"2 Daten","heading":"2.3 Skalenniveaus","text":"","code":""},{"path":"daten.html","id":"überblick","chapter":"2 Daten","heading":"2.3.1 Überblick","text":"Bemerkungen:Skalenniveaus sind nicht immer klar zuzuordnen.Skalenniveaus sind nicht immer klar zuzuordnen.Auf nominalen Datenskalen lassen sich stets künstliche Ordnungen (und damit ordinale Datenskalen) definieren.Auf nominalen Datenskalen lassen sich stets künstliche Ordnungen (und damit ordinale Datenskalen) definieren.Bilden sie keine Mittelwerte auf Daten mit ordinalen Datenskalen!Bilden sie keine Mittelwerte auf Daten mit ordinalen Datenskalen!Nominale und ordinale Datenskalen heißen auch kategorisch oder qualitativ.Nominale und ordinale Datenskalen heißen auch kategorisch oder qualitativ.Intervall und Ratio-Datenskalen heißen auch metrisch.Intervall und Ratio-Datenskalen heißen auch metrisch.Ergänzend: Die fünf Skalenniveaus: Einfach und verständlich erklärt (statistikpsychologie.de)","code":""},{"path":"daten.html","id":"skalenniveaus-im-iris-datensatz","chapter":"2 Daten","heading":"2.3.2 Skalenniveaus im Iris-Datensatz","text":"Skalenniveaus bei Iris","code":""},{"path":"daten.html","id":"von-nominal-zu-ordinal","chapter":"2 Daten","heading":"2.3.2.0.1 Von Nominal zu Ordinal","text":"Wir werden später folgende eindeutige Zuordnung treffen:","code":""},{"path":"matplotlib-und-seaborn.html","id":"matplotlib-und-seaborn","chapter":"3 Matplotlib und Seaborn","heading":"3 Matplotlib und Seaborn","text":"Mathplotlib (https://matplotlib.org/) ist eine Sammlung von Funktionen (Bibliothek) zum Visualisieren von Daten. Wir verwenden mathplotlib zusammen mit dem ergänzenden Programmpaket Seaborn.Wichtig: Sie müssen die folgenden beiden Zeilen stets Beginn des Programms stehen haben.","code":"import matplotlib.pyplot as plt\nimport seaborn as sns"},{"path":"plots.html","id":"plots","chapter":"4 Plots","heading":"4 Plots","text":"","code":""},{"path":"plots.html","id":"scatterplot","chapter":"4 Plots","heading":"4.1 Scatterplot","text":"AusgabeHinweise:Zu Farben siehe : https://seaborn.pydata.org/tutorial/color_palettes.html (Vorsicht, anspruchsvoll)Formatierung der Achsen beachten","code":"#Scatterplot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [33.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n\nsns.set()\nfig,ax = plt.subplots(figsize=(9, 9))\nax.set_title(\"Title\") \nax.set_xlabel(\"x-axis\")\nax.set_ylabel(\"y-axis\")\n#ax.set_aspect('equal')\n#ax.set_xlim(0, 50)\n#ax.set_ylim(0, 35)\n\nsns.scatterplot(x=years, y=gdp, color=\"red\", label=\"My Label\")          "},{"path":"plots.html","id":"liniendiagramme","chapter":"4 Plots","heading":"4.2 Liniendiagramme","text":"Hier ein erstes Beispiel:image-20211209164634964","code":"#Line\nsns.scatterplot(x=years, y=gdp, color=\"red\", label=\"My Label\")"},{"path":"plots.html","id":"barplot","chapter":"4 Plots","heading":"4.3 Barplot","text":"","code":"sns.barplot(x=years, y=gdp, color=\"red\", label=\"My Label\")"},{"path":"plots.html","id":"histogramme","chapter":"4 Plots","heading":"4.4 Histogramme","text":"image-20211210105040430","code":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nx_werte =  [1, 2, 2, 3,3, 4, 5, 6, 7, 8, 9, 10]\n\nsns.set()\nsns.histplot(x = x_werte,\n             #binwidth=1,\n             #bins=\"auto\",\n             bins=[0,2,5,7,10],\n             kde = False)"},{"path":"plots.html","id":"boxplots","chapter":"4 Plots","heading":"4.5 Boxplots","text":"Link: https://seaborn.pydata.org/generated/seaborn.boxplot.html Link: https://towardsdatascience.com/understanding-boxplots-5e2df7bcbd51image-20211210123539036Vertiefung:Outliers, Inliers, Surprises Fly Data | Rocket-Powered Data Science (rocketdatascience.org)image-20211210124842057image-20211210124819306","code":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(1,101)\nx = np.concatenate( (x, [152] ))\n\npercentiles = np.percentile( x, [0,25,50,75,100])\nIQR = (percentiles[3] -  percentiles[1])\nprint( \"Pericentile         : \", percentiles)\nprint( \"IQR                 : \", IQR)\nprint( \"Upper Outlier Limit : \", percentiles[3] + 1.5*IQR)\nsns.boxplot(x = x)"},{"path":"übungen.html","id":"übungen","chapter":"5 Übungen","heading":"5 Übungen","text":"","code":""},{"path":"übungen.html","id":"visualisierungsübung-1","chapter":"5 Übungen","heading":"5.1 Visualisierungsübung 1","text":"Versuchen sie folgende Kurve zu zeichnen:image-20211210101947217(Die Lösung finden sie Ende des Dokumentes)","code":""},{"path":"übungen.html","id":"visualisierungsübung-2","chapter":"5 Übungen","heading":"5.2 Visualisierungsübung 2","text":"Sie können mit numpy eine Liste mit 50 gleichverteilen Zufallszahlen erstellen. Erzeugen Sie zwei dieser Listen (x und y) und zeigen sie die 50 Paare Paare (x[], y[]) einem Scatterplot . ähnlich (!) sollte die Ausgabe aussehen:\n\nimage-20211210102949673\nSie können mit numpy eine Liste mit 50 gleichverteilen Zufallszahlen erstellen. Erzeugen Sie zwei dieser Listen (x und y) und zeigen sie die 50 Paare Paare (x[], y[]) einem Scatterplot . ähnlich (!) sollte die Ausgabe aussehen:image-20211210102949673Welches Ausgabe erwarten Sie, wenn Sie 1. statt 50 Zahlen jeweils 2000 Zahlen erzeugen? Beschreiben sie das Ergebnis 2-3 Sätzen.Welches Ausgabe erwarten Sie, wenn Sie 1. statt 50 Zahlen jeweils 2000 Zahlen erzeugen? Beschreiben sie das Ergebnis 2-3 Sätzen.Wiederholen sie Aufgabe 1 mit der Normalverteilung (Erwartungswert 0, Standardabweichung 1) statt der Gleichverteilung. Verwenden sie 2000 Punkte. Überlegen sie bitte vorher: welche grafischen Ausgabe erwarten sie?Wiederholen sie Aufgabe 1 mit der Normalverteilung (Erwartungswert 0, Standardabweichung 1) statt der Gleichverteilung. Verwenden sie 2000 Punkte. Überlegen sie bitte vorher: welche grafischen Ausgabe erwarten sie?Erzeugen Sie ein Histogramm für die Erzeugung von 10000 gleichverteilten (normalverteilten) Zufallszahlen. ähnlich sollte das Ergebnis aussehen:Erzeugen Sie ein Histogramm für die Erzeugung von 10000 gleichverteilten (normalverteilten) Zufallszahlen. ähnlich sollte das Ergebnis aussehen:image-20211210103950590","code":""},{"path":"plots-für-iris.html","id":"plots-für-iris","chapter":"6 Plots für Iris","heading":"6 Plots für Iris","text":"","code":""},{"path":"plots-für-iris.html","id":"laden-der-daten","chapter":"6 Plots für Iris","heading":"6.1 Laden der Daten","text":"","code":"import pandas as pd\nfrom sklearn import datasets\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\niris = datasets.load_iris()\niris_df = pd.DataFrame(iris.data)\niris_df['class']=iris.target_names[iris.target ]\niris_df.columns=['sepal_len', 'sepal_wid', 'petal_len', 'petal_wid', 'class']"},{"path":"plots-für-iris.html","id":"histogramm-für-ein-feature","chapter":"6 Plots für Iris","heading":"6.2 Histogramm für ein Feature","text":"image-20211209170610859","code":"sns.set()\nsns.histplot( iris_df, \n             x =\"petal_wid\", \n             bins=10,  # try bins=\"auto\" und bins=10\n             kde = False)"},{"path":"plots-für-iris.html","id":"relation-plots","chapter":"6 Plots für Iris","heading":"6.3 Relation-Plots","text":"image-20211209170740088","code":"sns.relplot(data=iris_df, x=\"petal_len\", y=\"sepal_wid\", hue = \"class\", height=7)"},{"path":"plots-für-iris.html","id":"pairplots","chapter":"6 Plots für Iris","heading":"6.4 Pairplots","text":"Ausgabe:image-20211209171426965","code":"sns.pairplot(iris_df[['sepal_len', 'sepal_wid', 'petal_len', 'petal_wid', 'class']],\n             hue=\"class\", diag_kind=\"kde\")"},{"path":"beispiele-bilder.html","id":"beispiele-bilder","chapter":"7 Beispiele: Bilder","heading":"7 Beispiele: Bilder","text":"Bilder lassen sich als Numpy-Arrays darstellen und bearbeiten. Unterstützte shapes sind:(M, N): ein Bild mit skalaren Werten (0-1 float oder 0-255 int). Visualisierung erfolgt über eine colormap.(M, N, 3): ein Farbbild mit RGB Werten (0-1 float oder 0-255 int).Die ersten beiden Werte (M, N) definieren die Anzahl der Zeilen und Spalten des Bildes.(Taken https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.imshow.html)","code":""},{"path":"beispiele-bilder.html","id":"grauwert-bilder-als-nxm-matrix","chapter":"7 Beispiele: Bilder","heading":"7.1 Grauwert-Bilder als nxm Matrix","text":"Folgende Befehle erzeugen ein künstliches und (gleichverteilt) zufälliges Grauwertbild:Colormaps finden sie unter https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html. Sie können auch probieren: ‘Greys’, ‘Purples’, ‘Blues’, ‘Greens’, ‘Oranges’, ‘Reds’, ‘YlOrBr’, ‘YlOrRd’, ‘OrRd’, ‘PuRd’, ‘RdPu’, ‘BuPu’, ‘GnBu’, ‘PuBu’, ‘YlGnBu’, ‘PuBuGn’, ‘BuGn’, ‘YlGn’","code":"import matplotlib.pyplot as plt\nimport numpy as np\n\nimg = np.random.rand(10,10)\nplt.imshow(img, cmap= plt.cm.get_cmap('Oranges'), vmin=0, vmax=1  )"},{"path":"beispiele-bilder.html","id":"farbbilder-aus-datei-laden","chapter":"7 Beispiele: Bilder","heading":"7.2 Farbbilder aus Datei laden","text":"image-20211210112329871","code":"import numpy as np\nimport matplotlib.pyplot as plt\n\nurl = 'http://www.dietergreipl.de/wp-content/uploads/2019/10/owl-50267_1920.png'\neule = plt.imread( url )\nprint(eule.shape)\nprint(np.amax( eule ))\nprint(np.amin( eule ))\nplt.figure( figsize=(20,15))\nplt.imshow( eule )"},{"path":"beispiele-bilder.html","id":"einfache-farbbilder-erzeugen","chapter":"7 Beispiele: Bilder","heading":"7.3 Einfache Farbbilder erzeugen","text":"","code":"import numpy as np\nimport matplotlib.pyplot as plt\nimg = np.zeros( (200,200,3))\nimg[:,:,1] = np.ones((200))\nplt.figure()\nplt.imshow( img  )"},{"path":"beispiele-bilder.html","id":"komplett-zufälliges-farbbild","chapter":"7 Beispiele: Bilder","heading":"7.4 Komplett zufälliges Farbbild","text":"image-20211210112144985","code":"import numpy as np\nimport matplotlib.pyplot as plt\nimg = np.random.random( 200*200*3).reshape(200,200,3)\nplt.figure(figsize= (9,9))\nplt.imshow( img  )"},{"path":"beispiele-bilder.html","id":"übungen-1","chapter":"7 Beispiele: Bilder","heading":"7.4.1 Übungen","text":"","code":""},{"path":"beispiele-bilder.html","id":"wie-kommt-dieses-bild-zustande","chapter":"7 Beispiele: Bilder","heading":"7.4.1.1 Wie kommt dieses Bild zustande?","text":"Erläutern Sie, wie das Bild erstellt wird, speziell die -Schleife:Ausgabe:image-20211210112001756","code":"import numpy as np\nimport matplotlib.pyplot as plt\n\nimg= np.ones((200, 200))\n\nfor col in range(0, 200):\n  img[:,col] = col\n\nplt.figure(figsize= (9,9))\nplt.imshow( img, cmap= plt.get_cmap('gray'), vmin=0, vmax=200)"},{"path":"beispiele-bilder.html","id":"erklären-sie-die-ausgabe-dieses-programms","chapter":"7 Beispiele: Bilder","heading":"7.4.1.2 Erklären sie die Ausgabe dieses Programms:","text":"Ausgabe:image-20211210113514004","code":"import numpy as np\nimport matplotlib.pyplot as plt\nimg = np.random.normal(0.5, 0.1, 200*200*3).reshape(200,200,3)\nplt.figure(figsize= (9,9))\nplt.imshow( img  )"},{"path":"sandbox.html","id":"sandbox","chapter":"8 Sandbox","heading":"8 Sandbox","text":"","code":""},{"path":"sandbox.html","id":"alle-farben","chapter":"8 Sandbox","heading":"8.1 Alle Farben","text":"Folgendes Programm gibt alle Farben mit Farbnamen aus:","code":"from matplotlib.patches import Rectangle\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\n\n\ndef plot_colortable(colors, title, sort_colors=True, emptycols=0):\n\n    cell_width = 212\n    cell_height = 22\n    swatch_width = 48\n    margin = 12\n    topmargin = 40\n\n    # Sort colors by hue, saturation, value and name.\n    if sort_colors is True:\n        by_hsv = sorted((tuple(mcolors.rgb_to_hsv(mcolors.to_rgb(color))),\n                         name)\n                        for name, color in colors.items())\n        names = [name for hsv, name in by_hsv]\n    else:\n        names = list(colors)\n\n    n = len(names)\n    ncols = 4 - emptycols\n    nrows = n // ncols + int(n % ncols > 0)\n\n    width = cell_width * 4 + 2 * margin\n    height = cell_height * nrows + margin + topmargin\n    dpi = 72\n\n    fig, ax = plt.subplots(figsize=(width / dpi, height / dpi), dpi=dpi)\n    fig.subplots_adjust(margin/width, margin/height,\n                        (width-margin)/width, (height-topmargin)/height)\n    ax.set_xlim(0, cell_width * 4)\n    ax.set_ylim(cell_height * (nrows-0.5), -cell_height/2.)\n    ax.yaxis.set_visible(False)\n    ax.xaxis.set_visible(False)\n    ax.set_axis_off()\n    ax.set_title(title, fontsize=24, loc=\"left\", pad=10)\n\n    for i, name in enumerate(names):\n        row = i % nrows\n        col = i // nrows\n        y = row * cell_height\n\n        swatch_start_x = cell_width * col\n        text_pos_x = cell_width * col + swatch_width + 7\n\n        ax.text(text_pos_x, y, name, fontsize=14,\n                horizontalalignment='left',\n                verticalalignment='center')\n\n        ax.add_patch(\n            Rectangle(xy=(swatch_start_x, y-9), width=swatch_width,\n                      height=18, facecolor=colors[name], edgecolor='0.7')\n        )\n\n    return fig\n\nplot_colortable(mcolors.BASE_COLORS, \"Base Colors\",\n                sort_colors=False, emptycols=1)\nplot_colortable(mcolors.TABLEAU_COLORS, \"Tableau Palette\",\n                sort_colors=False, emptycols=2)\n\nplot_colortable(mcolors.CSS4_COLORS, \"CSS Colors\")\n\n# Optionally plot the XKCD colors (Caution: will produce large figure)\n# xkcd_fig = plot_colortable(mcolors.XKCD_COLORS, \"XKCD Colors\")\n# xkcd_fig.savefig(\"XKCD_Colors.png\")\n\nplt.show()"},{"path":"sandbox.html","id":"lösungen","chapter":"8 Sandbox","heading":"8.2 Lösungen","text":"","code":""},{"path":"sandbox.html","id":"visualisierung-1","chapter":"8 Sandbox","heading":"8.2.1 Visualisierung 1","text":"","code":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nx = np.linspace(0, 2*np.pi, 40)\n\nfig,ax = plt.subplots(figsize=(9, 9))\n\nax.set_title(\"Sinus\") \nax.set_xlabel(\"x\")\nax.set_ylabel(\"sin(x)\")\nax.set_aspect(\"equal\")\n\nsns.set()\nsns.lineplot(x=x, y= np.sin(x), color=\"blue\", label=\"sin(x)\")"},{"path":"sandbox.html","id":"visualisierung-2","chapter":"8 Sandbox","heading":"8.2.2 Visualisierung 2","text":"","code":""},{"path":"sandbox.html","id":"section","chapter":"8 Sandbox","heading":"8.2.2.1 2.1","text":"","code":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nx = np.random.random(50)\ny = np.random.random(50)\n\nfig,ax = plt.subplots(figsize=(9, 9))\n\nsns.set()\nax.set_title(\"Random Points\") \nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\nax.set_aspect(\"equal\")\n\nsns.scatterplot(x=x, y=y, label=\"Random Points\")"},{"path":"sandbox.html","id":"section-1","chapter":"8 Sandbox","heading":"8.2.2.2 2.3","text":"","code":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nx = np.random.normal(0,1,2000)\ny = np.random.normal(0,1,2000)\n\nfig,ax = plt.subplots(figsize=(9, 9))\n\nsns.set()\nax.set_title(\"Random Points\") \nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\nax.set_aspect(\"equal\")\n\nsns.scatterplot(x=x, y=y, label=\"Random Points\")"},{"path":"sandbox.html","id":"section-2","chapter":"8 Sandbox","heading":"8.2.2.3 2.4","text":"","code":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nx = np.random.normal(0,1,20000)\n\n\nfig,ax = plt.subplots(figsize=(6, 6))\n\nsns.set()\nax.set_title(\"Histogramm der Normalverteilung\") \nax.set_xlabel(\"x\")\nax.set_ylabel(\"Count\")\n\nsns.histplot(x=x)"},{"path":"data-processing.html","id":"data-processing","chapter":"9 Data Processing","heading":"9 Data Processing","text":"","code":""},{"path":"data-processing.html","id":"grundsätzliche-fehlerarten","chapter":"9 Data Processing","heading":"9.1 Grundsätzliche Fehlerarten","text":"Bessere Datenqualität wird zu genaueren Ergebnissen führen.Mögliche Fehlerquellen:Messtechnisch nicht erfassbare Änderungen des zu messenden Gegenstandes, der Messgeräte, der Umwelt und der BeobachterMesstechnisch nicht erfassbare Änderungen des zu messenden Gegenstandes, der Messgeräte, der Umwelt und der BeobachterAblesefehlerAblesefehlerTippfehlerTippfehlermangelnde Kalibrierungmangelnde Kalibrierungfalsche Formelnfalsche Formelnfalsches Vorzeichen (+ oder -)falsches Vorzeichen (+ oder -)","code":""},{"path":"data-processing.html","id":"outliers","chapter":"9 Data Processing","heading":"9.1.1 Outliers","text":"Outliers, Inliers, Surprises Fly Data | Rocket-Powered Data Science (rocketdatascience.org)","code":""},{"path":"data-processing.html","id":"inliers-und-drift","chapter":"9 Data Processing","heading":"9.1.2 Inliers und Drift","text":"Original Data, Inliers Drift (Quelle: Runkler)","code":""},{"path":"data-processing.html","id":"missing-data-or-invalid-data","chapter":"9 Data Processing","heading":"9.1.3 Missing Data or Invalid Data","text":"Hier handelt es sich um fehlende Daten, z.B. leere oder ungültige Zellen Excel-Files. tun?Möglichkeiten zum Umgang:invalidity listinvalidity valuecorrection / estimation; Examples:\nmean, median, minimum, maximum\nnearest neighbor\nlineare interpolation\nmean, median, minimum, maximumnearest neighborlineare interpolationremoval feature vektorremoval feature ","code":""},{"path":"data-processing.html","id":"python-fehlerverdächtige-finden","chapter":"9 Data Processing","heading":"9.2 Python: Fehler/“Verdächtige” finden","text":"diesem und den folgenden Abschnitte arbeiten wir mit folgendem dem Dataframe X. Dieser sollte immer erzeugt sein, sonst funktionieren die weiterten Beispiele nicht.","code":"import pandas as pd\nimport numpy as np\n\nX = pd.DataFrame({\n   \"jahr\": [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    \"dax\": [6914.19, 5898.35, 7612.39, 9552.16, 9805.55, np.nan, 11481.06, 2917.64, 10558.96, 13249.01] \n   })"},{"path":"data-processing.html","id":"überblick-verschaffen-mit-dataframes-describe-und-info","chapter":"9 Data Processing","heading":"9.2.1 Überblick verschaffen mit Dataframes: describe und info","text":"Für unsere Feature-Matrix gibt es zwei Python Befehle, die wir zum Start grundsätzlich durchführen:","code":"X.describe()\nX.info()"},{"path":"data-processing.html","id":"missing-values-null-values-na-values","chapter":"9 Data Processing","heading":"9.2.2 Missing Values (null-Values, na-Values)","text":"Link: https://www.bmc.com/blogs/pandas-nan-missing-data/Der Aufruf X.info() sagt uns, dass nicht zu jeder Spalte alle Daten gefüllt sind.Info zu einem DataframeFolgender Befehl löscht alle Zeilen mit na-Werten aus dem Dataframe:","code":"XC = X.dropna()"},{"path":"data-processing.html","id":"umgang-mit-fehlern","chapter":"9 Data Processing","heading":"9.3 Umgang mit Fehlern","text":"","code":""},{"path":"data-processing.html","id":"grundsätzliche-möglichkeiten","chapter":"9 Data Processing","heading":"9.3.1 Grundsätzliche Möglichkeiten","text":"Removal feature vectorRemoval featuresSpecial handling: Invalidity listsCorrection / estimation: replacement \nmean, median, minimum, maximum\nnearest neighbor\nlinear interpolation\nmean, median, minimum, maximumnearest neighborlinear interpolation","code":""},{"path":"data-processing.html","id":"beispiel-dax","chapter":"9 Data Processing","heading":"9.3.2 Beispiel DAX","text":"","code":""},{"path":"data-processing.html","id":"ersetzen-eines-nan-durch-mean-median-minimum-maximum-fillna","chapter":"9 Data Processing","heading":"9.3.2.1 Ersetzen eines nan durch mean, median, minimum, maximum (fillna())","text":"","code":"import pandas as pd;\nimport numpy as np;\nX = pd.DataFrame({\n   \"jahr\": [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    \"dax\": [6914.19, 5898.35, 7612.39, 9552.16, 9805.55, np.nan, 11481.06, 2917.64, 10558.96, 13249.01] \n   })\n\nersatzwert = X[\"dax\"].mean() \nX[\"dax\"].fillna(ersatzwert, inplace = True)\nX"},{"path":"data-processing.html","id":"übung","chapter":"9 Data Processing","heading":"9.3.3 Übung","text":"Versuchen sie ein Ersetzen mit dem Minimum, Maximum oder Median. Zeichen Sie ein Histogramm nach Ersetzung.","code":""},{"path":"data-processing.html","id":"removal-of-feature-vector-dropna","chapter":"9 Data Processing","heading":"9.3.4 Removal of Feature-Vector (dropna())","text":"","code":"X = pd.DataFrame({\n   \"jahr\": [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    \"dax\": [6914.19, 5898.35, 7612.39, 9552.16, 9805.55, np.nan, 11481.06, 2917.64, 10558.96, 13249.01] \n   }\n  )\nXC = X.dropna()\nXC"},{"path":"data-processing.html","id":"filterung","chapter":"9 Data Processing","heading":"9.4 Filterung","text":"Filterung modifiziert Werte aus unserem Datensatz. Wir betrachten untern den zahlreichen Filteransätzen lediglich die Glättung von Werte durch Moving Average Techniken.","code":""},{"path":"data-processing.html","id":"moving-average","chapter":"9 Data Processing","heading":"9.4.1 Moving Average","text":"","code":""},{"path":"data-processing.html","id":"python-beispiel","chapter":"9 Data Processing","heading":"9.4.1.1 Python: Beispiel","text":"Daten mit FehlernWir glätten nun die Daten mit einem Moving Average Verfahren.Ergebnis:Moving Average Filter","code":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = 400\nx = np.linspace(-1,1,N)\ne = np.random.normal(size=N)\ny = x*x + 0.2 * e\nfig = plt.figure(figsize=(8,8))\nplt.plot( x, x*x, color=\"black\", linestyle='-')\nplt.plot( x, y, color=\"red\", linestyle='-'y_filtered = pd.Series(y).rolling(window=50, center=True).mean()\nplt.plot( x, y_filtered, color=\"green\", linestyle='-')"}]
