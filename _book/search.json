[{"path":"index.html","id":"einführung","chapter":"Einführung","heading":"Einführung","text":"Dieses Skript entstand (und entsteht) aus meinen Lehrveranstaltungen rund um das Thema Data Science & Machine Learning. Die Inhalte richten sich Einsteiger und Studierende, insbesondere der Fachrichtungen Betriebswirtschaftslehre, die Schritte auf das KI-Spielfeld wagen und das Potential von datengetriebenen Lösungsverfahren verstehen wollen.","code":""},{"path":"index.html","id":"breite-statt-tiefe","chapter":"Einführung","heading":"Breite statt Tiefe","text":"Die Spannweite des Inhalts erfordert vielen Stellen den Verzicht auf Tiefe. Insofern beschränken sich die Inhalte auf die für das Verständnis des Stoffes nötigen Elemente. Das schmerzt den Autor etwas, ist aber im Interesse der Leser. Es bleibt also vielfältige Möglichkeiten für eigenständige Tiefbohrungen, zum Beispiel den Abschnitten zu Visualisierung oder zu Dataframes. Das Prinzip von Breite statt Tiefe gilt auch für die folgenden Themen.","code":""},{"path":"index.html","id":"mathematik-und-statistik","chapter":"Einführung","heading":"Mathematik und Statistik","text":"Übliche Vorkenntnisse im Bereich Mathematik und Statistik werden erwartet, teilweise knapp wiederholt. Vorkenntnisse im Bereich der Programmierung sind nicht nötig, aber natürlich hilfreich.","code":""},{"path":"index.html","id":"programmieren","chapter":"Einführung","heading":"Programmieren","text":"Data Science und Machine Learning ist ohne praktisches Üben nicht zielführend - und langweilig. Zum Üben braucht es eine Programmiersprache. Wir verwenden dazu Python. Vorkenntnisse werden nicht vorausgesetzt.","code":""},{"path":"python---quickstart.html","id":"python---quickstart","chapter":"1 Python - Quickstart","heading":"1 Python - Quickstart","text":"Es wird sie nicht überraschen, dass Data-Science nur mit Unterstützung eines Computers und speziellen Programmiersprachen zielführend ist. Wir verwenden hierfür die Programmiersprache Python. Ich empfehle dringend, eine der folgenden Varianten für praktische Übungen mit Python zu verwenden. Wir starten beiden Varianten mit dem typischerweise ersten Programm für Anfänger, dem Hallo-Welt-Programm. Dieses Programm gibt lediglich den digitalen Gruß “Hallo Welt” dem vorgesehen Ausgabebereich aus.","code":""},{"path":"python---quickstart.html","id":"hallo-welt","chapter":"1 Python - Quickstart","heading":"1.1 Hallo Welt","text":"Unser kleines Begrüßungsprogramm besteht nur aus einer Befehlszeile:Die Ausgabe dieses Programms ist:Wichtig:Sie können ihre Programme Kommentare einfügen, die von Python ignoriert werden. Ein dokumentiertes Programm hilft dem besseren Verständnis. Kommentarzeilen beginnen immer mit #.den meisten Fällen zeigen wir zu Python-Programmen auch die Ausgaben. Sie starten diesem Skript stets mit der Zeichenfolge #>","code":"# Hier kommt meine erste Programmzeile\nprint(\"Hallo Welt\")#> Hallo Welt"},{"path":"python---quickstart.html","id":"variante-1-colab-notebooks","chapter":"1 Python - Quickstart","heading":"Variante 1: Colab-Notebooks","text":"Unter dem Link https://colab.research.google.com/ können sie ein sogenanntes Colab-Notebook erstellen. die Programmzelle können tragen sie die Befehle ein. Ein Klick auf  führt die Programmzeilen aus und schreibt eventuelle Ausgaben unter die Programmzelle.Colab-Notebook mit ProgrammzelleVersuchen sie es! Mit File->Save können sie das Notebook abspeichern. Weitere Hinweise zum Umgang mit Colab-Notebook finden sie unter https://research.google.com/colaboratory/faq.html. Besonders smart ist die Funktion von Textzellen. Sie erlauben das Hinzufügen eigener Texte vor oder nach den Programmzellen; lässt sich ein eigenes Skript erstellen.Textzelle über der Programmzelle","code":""},{"path":"python---quickstart.html","id":"variante-2-installation-von-python","chapter":"1 Python - Quickstart","heading":"Variante 2: Installation von Python","text":"Alternativ können sie Python auch auf ihrem Rechner installieren. Die Installationsanleitung finden sie auf https://www.python.org/. Um die Installation zu prüfen verwenden sie den BefehlAls Ausgabe erhalten sie die installierte Version von Python, zum Beispiel Python 3.9.6. Sie können nun mit einem einfachen Texteditor, z.B. Notepad++, die Programmbefehle eine Datei schreiben. Wenn sie die Zeile print(\"Hallo Welt\") die Datei HalloWelt.py schreiben, können sie das Programm mit folgendem Befehl ausführen.Sie sollten nun die Ausgabe Hallo Welt sehen.Verwenden sie die für Python-Programme übliche Dateiendung .py. Keine Leerzeichen im Dateinamen!","code":"python --version    python HalloWelt.py"},{"path":"python---quickstart.html","id":"programme-und-fehler","chapter":"1 Python - Quickstart","heading":"1.2 Programme und Fehler","text":"Sie werden eventuell Syntax-Fehler ihren Programmen haben. Syntax-Fehler entstehen, wenn Python ihr Programm nicht versteht. Oft geht es dabei um “Rechtschreibfehler”: schreiben sie fälschlicherweise prin(\"Hallo Welt\"), erhalten sie bei der Programmausführung eine Fehlermeldung:Häufig lässt sich diese Meldung leicht verstehen, und sie können den Fehler korrigieren.Läuft ein Programm ohne Fehlermeldung ab, kann man daraus natürlich nicht auf die Korrektheit des Programms schließen! Ihr Programm kann auch logisch falsch sein, also nicht die gewünschte Funktion oder Berechnung ausführen.","code":"line 1, in <module>\n    prin(\"Hallo Welt\")\nNameError: name 'prin' is not defined "},{"path":"python---quickstart.html","id":"python-lernen","chapter":"1 Python - Quickstart","heading":"1.3 Python lernen","text":"Es geht uns nicht erster Linie darum gute Python-Programmierer zu werden. Unsere Kenntnisse müssen aber für Bearbeitung unserer Problemstellungen ausreichen. Das legt auch den Umfang Python Know-fest, den sie dieser Unterlage finden. Es gibt hierfür zahlreiche gute Bücher und Internetquellen. Eine gutes Online-Angebot, auf das ich regelmäßig verweisen werde ist https://www.w3schools.com/python/. Suchen sie doch unter Python Intro nach dem Hallo-Welt-Beispiel. Sie finden dort unter Try eine weitere Möglichkeit Python-Programme auszuführen!","code":""},{"path":"daten.html","id":"daten","chapter":"2 Daten","heading":"2 Daten","text":"Daten1 sind Ergebnisse von Beobachtungen, Messungen oder Berechnungen, die einer bestimmten Form notiert, sind. Häufig sprechen sprechen wir auch von Werten, statt von Daten. Wenn wir viele gleichartige Daten erfassen, aufbereiten und Zusammengänge analysieren, lassen sich daraus möglicherweise mittels Algorithmen komplexe Aufgabenstellungen lösen. Wir erläutern diese Idee anhand des Iris-Datensatzes2 (engl. Iris flower data set).","code":""},{"path":"daten.html","id":"iris-datensatz","chapter":"2 Daten","heading":"2.1 Iris-Datensatz","text":"Der Iris-Datensatz ist einer der bekanntesten Datensätze für Maschinelles Lernen und entstand 1936. Gegenstand der Messung waren 150 Lilien der Arten Iris setosa, Iris versicolor, und Iris virginica. Gemessen wurden für je eine Blüte jeweils (cm):die Länge und Breite des Kronblattes (Petalum, petal) sowiedie Länge und Breite des Kelchblattes (Sepalum, sepal)Pro Messung entstehen also 4 Werte und die Spezies der untersuchten Lilie.LilienartenMessung von Länge und Breite3Nachfolgende Tabellen zeigen die Aufzeichnungen der ersten 5 Messungen gefolgt und der letzten 5 Messungen. Der Datensatz enthält jeweils 50 Lilien jeder Sorte. Die Spezies wird der letzten Spalte unter class angegebenDie ersten 5 Datensätze (#0 - #4):Die letzten 5 Datensätze (#145 - #149):Wir greifen zwar etwas vor, aber diesem Beispiel lässt sich eine typische Aufgabenstellung von Machine Learning recht einfach erklären: Ein Bobachter erhebt für die Blüte einer Lilie die Messwerte sepal_len, sepal_wid, petal_len, petal_wid und daraus die Art dieser Lilie bestimmen.Nehmen wir nun , dass der Beobachter die Werte \\((5.1, 3.5, 1.4, 0.2)\\) misst. Wir erkennen, dass genau diese Werte als Datenzeile \\(0\\) unserem Datensatz vorliegen und bereits von einer Setosa erhoben wurden (Spalte class). Wir werden natürlich Setosa als Art dieser Blüte angeben. Dieser Fall wir wohl eher selten auftreten. Schwieriger ist die Antwort zum Beispiel für die Messwerte \\((6.1, 3.2, 5.3, 2.1)\\), die nicht als Zeile unserem Datensatz auftreten. Mit etwas Recherche finden wir heraus, dass Datensatz 148 für die recht ähnlichen Werte \\((6.2, 3.4, 5.4, 2.3)\\) für eine Virginica enthält. Wir könnten also mit der Art “Virginica” antworten.4Um Datensätze für Machine Learning zu verwenden, müssen wir wir sie vorher auf Tauglichkeit untersuchen, eventuell korrigieren, filtern und weiter.","code":"#>    sepal_len  sepal_wid  petal_len  petal_wid   class\n#> 0        5.1        3.5        1.4        0.2  setosa\n#> 1        4.9        3.0        1.4        0.2  setosa\n#> 2        4.7        3.2        1.3        0.2  setosa\n#> 3        4.6        3.1        1.5        0.2  setosa\n#> 4        5.0        3.6        1.4        0.2  setosa#>      sepal_len  sepal_wid  petal_len  petal_wid      class\n#> 145        6.7        3.0        5.2        2.3  virginica\n#> 146        6.3        2.5        5.0        1.9  virginica\n#> 147        6.5        3.0        5.2        2.0  virginica\n#> 148        6.2        3.4        5.4        2.3  virginica\n#> 149        5.9        3.0        5.1        1.8  virginica"},{"path":"daten.html","id":"variablen","chapter":"2 Daten","heading":"2.2 Variablen","text":"Eine Beobachtung oder Messung eines einzelnen Wertes formulieren wir obigem Beispiel der Form “Sepal-Länge: 5,1cm”. Die Beobachtung Sepal-Länge wird bei verschiedenen Blüten verschiedene Werte annehmen. Zum Umgang mit diesen Werten verwenden wie Variablen. Variablen sind Platzhalter oder Speicher für Werte, wir sprechen also vom Wert einer Variable. Im nachfolgendem Beispiel wird der Variable mit dem Namen sepal_laenge der Wert \\(5.1\\) zugewiesen. Variablen haben immer einen Namen. Einen Wert erhalten sie erst durch eine sog. Zuweisung (wie Zeile 1). Zeile 2 drucken wir den Wert aus. Führen Sie also folgende Phython-Befehle aus:Ausgabe:Die erstmalige Zuweisung eines Wertes eine Variable heißt Initialisierung.Wichtig:Leerzeichen Variablennamen sind nicht erlaubt! (Deshalb wurde der Underscore verwendet.)Vermeiden sie Umlaute Variablen","code":"sepal_len = 5.1\nprint(sepal_len)#> 5.1"},{"path":"daten.html","id":"datentypen","chapter":"2 Daten","heading":"2.3 Datentypen","text":"Ein Wert einer Messung kann neben einer Zahl \\(5.1\\) auch ein Text (zum Beispiel “sehr gut”) sein. Offensichtlich gehören beide Werte zu verschiedene Typen von Werten, den sogenannten Datentypen. Zudem brauchen wir logischen Datentypen, um zu bewerten, ob Sachverhalte wahr (True) oder falsch (False) sind. Wir beschäftigen uns also mit den DatentypenZahlenStrings (Text, Worte) undBoolean (logische Werte).Werte mit diesen Datentypen lassen sich zu Listen und Tupel zusammenfassen. Wir behandeln sie Ende des Abschnittes.","code":""},{"path":"daten.html","id":"zahlen","chapter":"2 Daten","heading":"2.3.1 Zahlen","text":"Werte dieses Datentyps sind z.B. \\(1\\), \\(-1\\), \\(1.7\\) oder \\(1/3\\). Wie sie wissen, lässt sich die Menge der Zahlen noch weiter einteilen natürliche Zahlen und reelle Zahlen 5. Zur Notation diese Zahlenmengen verwenden wir die üblichen Symbole \\(\\mathbb{N}\\) für die natürlichen Zahlen und \\(\\mathbb{R}\\) für die reellen Zahlen.Wir notieren Zahlen wie üblich und verwenden der Dezimalnotation den Punkt als Trennsymbol.Nachfolgendes Beispiel zeigt anhand einfacher Programmzeilen die Darstellung von Zahlen und zugleich schon die Verwendung der üblichen Operatoren für Addition und Multiplikation.Die Ausgabe dieses Programms ist:Mit der Funktion type kann lässt sich der Datentyp eines Wertes ausgeben. Es wird einigen Stellen hilfreich sein, den Datentyp eines Wertes anzuzeigen.Die Ausgabe dieses Programms ist:Die erste Ausgabezeile bedeutet, dass int der Datentyp des Wertes \\(1\\) ist. Analog ist float der Datentyp des Wertes \\(1.2\\). Beachten Sie, dass der Ausdruck \\(4/2\\) den Datentyp float besitzt, obwohl auch int plausibel wäre.","code":"x = 1\nprint(x)\nx = 1+1.1\nprint(x)\nx = 1/2+3/4\nprint(x)\nx = 1.2*2\nprint(x)#> 1\n#> 2.1\n#> 1.25\n#> 2.4x = 1; \nprint(type(x))\nx = 1.2; \nprint(type(x))\nx = 4/3; \nprint(type(x))#> <class 'int'>\n#> <class 'float'>\n#> <class 'float'>"},{"path":"daten.html","id":"operationen","chapter":"2 Daten","heading":"Operationen","text":"Zahlen lassen sich verknüpfen mit den üblichen Symbolen verknüpfen.Die Ausgabe dieses Programms ist:Wir werden mit diesen Operationen zurechtkommen. Mehr finden Sie unter https://www.w3schools.com/python/python_operators.asp","code":"x = 9; \ny = -4\n\ne = x+y\nprint(e)\ne = x-y\nprint(e)\ne = x*y\nprint(e)\ne = x/y\nprint(e)#> 5\n#> 13\n#> -36\n#> -2.25"},{"path":"daten.html","id":"strings","chapter":"2 Daten","heading":"2.3.2 Strings","text":"Strings sind Zeichenkette. Werte dieses Datentyps sind zum Beispiel “Baum”, “Hans Huber” oder “sehr gut”. Zeichenketten beginnen und enden mit einem Anführungszeichen. der Regel macht uns diese Notationen keine Probleme - manchmal wird es trotzdem ungemütlich: Kann eine Zeichenkette ein Anführungszeichen enthalten? Gibt es einen Unterschied zwischen der Zahl 123 und der Zeichenkette “123”? Wir vertiefen das hier nicht, sondern gehen auf die Fragen , sobald sie uns begegnen.Wir können einer Variable einen String zuweisen, wenn wir den Wert Hochkommata setzen:Ausgabe:Die einzige benötigte Operation ist die sogenannte Konkatenation, also das “Aneinanderhängen” von Strings. Dazu wird der \\(+\\) Operator verwendet:Ausgabe:Frage: erwarten sie für die Berechnung \\(s-t\\) oder \\(s*t\\) ?Mehr lesen: https://www.w3schools.com/python/gloss_python_string_concatenation.asp","code":"s = \"Aus\"\nprint( type(s) )#> <class 'str'>s = \"Aus\"\nt = \"gabe\"\nprint( s+t )#> Ausgabe"},{"path":"daten.html","id":"boolean","chapter":"2 Daten","heading":"2.3.3 Boolean","text":"Der Datentyp Boolean (logischer Datentyp) umfasst nur zwei Werte, die sogenannten Wahrheitswerte. Wir werden diesem Text die Notation True und False verwenden.Ausgabe:","code":"b = True;\nprint(b)\nprint( type(b) )\nb = False;\nprint(b)\nprint( type(b) )#> True\n#> <class 'bool'>\n#> False\n#> <class 'bool'>"},{"path":"daten.html","id":"listen-und-tupel","chapter":"2 Daten","heading":"2.3.4 Listen und Tupel","text":"Listen und Tupel sind eine geordnete Zusammenstellung von Werten.","code":""},{"path":"daten.html","id":"listen","chapter":"2 Daten","heading":"2.3.4.1 Listen","text":"Folgendes Beispiel illustriert den Datentype listAusgabe:Auf Element einer Liste wird durch Angabe der gewünschten Position zugegriffenAusgabe:Damit lassen sich auch Einträge der Liste ändern:Ausgabe:Die Länge einer Liste lässt sich über die eingebaute Funktion len abfragen:Ausgabe:","code":"l = [\"apple\", \"banana\", \"cherry\"]\nprint( l )\nprint( type(l))#> ['apple', 'banana', 'cherry']\n#> <class 'list'>l = [\"apple\", \"banana\", \"cherry\"]\nprint( l[0] )\nprint( l[2] )#> apple\n#> cherryl = [\"apple\", \"banana\", \"cherry\"]\nl[1] = \"orange\"\nprint( l )#> ['apple', 'orange', 'cherry']l = [\"apple\", \"banana\", \"cherry\"]\nprint( len(l) )#> 3"},{"path":"daten.html","id":"tupel","chapter":"2 Daten","heading":"Tupel","text":"Tupel sind sehr ähnlich zu Listen, die Einträge sind jedoch nicht änderbar. Zur Unterscheidung gegenüber Listen werden runde Klammern verwendet:Ausgabe:Beachten sie, dass der Versuch einer Änderung durch t[0] = 1 zu einem Fehler führt (Test als Übung!).","code":"t = (\"Erde\",-1,\"Mond\")\nprint(t)\nprint( t[2] )\nprint( len(t) )\nprint( type(t) )#> ('Erde', -1, 'Mond')\n#> Mond\n#> 3\n#> <class 'tuple'>"},{"path":"daten.html","id":"zusammenfassung","chapter":"2 Daten","heading":"2.3.5 Zusammenfassung","text":"Die Datentypen int, float, bool, list und tupel sind Python eingebaut. Wir werden später weitere, kompliziertere Datentypen kennenlernen, die über Erweiterung von Python verfügbar sind. Eine komplette Aufzählung aller Datentypen finden sie unter https://www.w3schools.com/python/python_datatypes.asp. Wie sie sehen, haben wir nicht alle Varianten behandelt.Stellen sie sich jeden Datentyp als Menge vor. Die Elemente der Menge sind die zulässigen Werte des Datentyps. Offensichtlich ist besitzt die Menge der Zahlen oder Texte unendlich viele Elemente, während der Logische Datentyp nur zwei Werte kennt.","code":""},{"path":"daten.html","id":"übungen","chapter":"2 Daten","heading":"2.3.6 Übungen","text":"Geben sie die Ergebnisse der Rechnungen \\(3-1.1\\) und \\(12 / 5\\) aus.Geben sie die Ergebnisse der Rechnungen \\(3-1.1\\) und \\(12 / 5\\) aus.Erklären Sie die Ausgabe für folgenden Programmzeile\nprint(1e2+1e-1)\nAusgabe:\n#> 100.1Erklären Sie die Ausgabe für folgenden ProgrammzeileAusgabe:","code":"print(1e2+1e-1)#> 100.1"},{"path":"daten.html","id":"skalenniveaus","chapter":"2 Daten","heading":"2.4 Skalenniveaus","text":"Bemerkungen:Skalenniveaus sind nicht immer klar zuzuordnen.Skalenniveaus sind nicht immer klar zuzuordnen.Auf nominalen Datenskalen lassen sich stets künstliche Ordnungen (und damit ordinale Datenskalen) definieren.Auf nominalen Datenskalen lassen sich stets künstliche Ordnungen (und damit ordinale Datenskalen) definieren.Bilden sie keine Mittelwerte auf Daten mit ordinalen Datenskalen!Bilden sie keine Mittelwerte auf Daten mit ordinalen Datenskalen!Nominale und ordinale Datenskalen heißen auch kategorisch oder qualitativ.Nominale und ordinale Datenskalen heißen auch kategorisch oder qualitativ.Intervall und Ratio-Datenskalen heißen auch metrisch.Intervall und Ratio-Datenskalen heißen auch metrisch.Ergänzend: Die fünf Skalenniveaus: Einfach und verständlich erklärt (statistikpsychologie.de)","code":""},{"path":"daten.html","id":"beispiel-von-nominal-zu-ordinal","chapter":"2 Daten","heading":"Beispiel: Von Nominal zu Ordinal","text":"Wir werden später folgende eindeutige Zuordnung treffen:Diese einfache Zuordnung weist auf einen wichtigen Arbeitsschritt hin: dem Auf- und Vorbereiten der Daten für die weitere Bearbeitung.","code":""},{"path":"daten.html","id":"übungen-1","chapter":"2 Daten","heading":"2.4.1 Übungen","text":"Welches Skalenniveau haben die einzelnen Spalten im Iris-Datensatz?Diskutieren sie die Zulässigkeit einer Durchschnittsnote für Prüfungen.","code":""},{"path":"lineare-algebra.html","id":"lineare-algebra","chapter":"3 Lineare Algebra","heading":"3 Lineare Algebra","text":"diesem Abschnitt wiederholen wir ein paar ausgewählte Begriffe aus der Linearen Algebra, die bekannt sein sollten.","code":""},{"path":"lineare-algebra.html","id":"skalar","chapter":"3 Lineare Algebra","heading":"3.1 Skalar","text":"Die meisten Objekte der Linearen Algebra sind Strukturen von Zahlen, zum Beispiel Vektoren oder Matrizen. Skalare dagegen sind ganz einfach nur Zahlen, unserem Fall reelle Zahlen. Wir bezeichnen Skalare mit kleinen kursiven Buchstaben. Wir schreiben zum Beispiel \\(s \\\\mathbb{R}.\\)Wir betrachten nur reelle Vektorräume!","code":""},{"path":"lineare-algebra.html","id":"vektor-und-dimension","chapter":"3 Lineare Algebra","heading":"3.2 Vektor und Dimension","text":"Ein Vektor ist ein Tupel reeller Zahlen, die einer bestimmten Weise angeordnet sind. Jede reelle Zahl aus dem Tupel ist über einen Index genau bestimmt. Wir notieren einen Vektor mit einem kleinen und fett gedruckten Buchstaben, also z.B. \\(\\bf{x}\\) . Die einzelnen Zahlen des Vektors werden kursiv gedruckt und mit ihrem Index notiert, also die erste Zahl mit \\(x_1\\), die zweite Zahl mit \\(x_2\\) und weiter. Enthält der Vektor \\(n\\) reelle Zahlen ist der Vektor ein Element des n-fachen kartesischen Produktes der reellen Zahlen \\(\\mathbb{R}\\), kurz \\(\\mathbb{R}^{n}\\). Um die Elemente eines Vektors explizit anzugeben, wird sie der Regel als Spalte eckigen Klammern notiert, also\\[\n\\bf{x} = \\begin{bmatrix}\nx_1 \\\\\nx_2 \\\\\n\\vdots \\\\\nx_n \\\\\n\\end{bmatrix}\n\\\\mathbb{R}^n\n\\]Häufig werden wir auch die Notation Form einer Zeile wählen also \\(\\mathbf{x} = (x_1, \\ldots, x_n)\\). Die Zahl n heißt Dimension des Vektors.","code":""},{"path":"lineare-algebra.html","id":"multiplikation-mit-skalar-und-elementweise-addition","chapter":"3 Lineare Algebra","heading":"3.2.1 Multiplikation mit Skalar und elementweise Addition","text":"Für zwei Vektoren \\(\\bf{x},\\bf{y} \\\\mathbb{R}^{n}\\) ist die Multiplikation mit einem Skalar und die Addition definiert durch:\\[\ns \\cdot\\bf{ x} = \n\\begin{bmatrix}\ns\\cdot x_1 \\\\\ns\\cdot x_2 \\\\\n\\vdots \\\\\ns\\cdot x_n \\\\\n\\end{bmatrix}\n\\quad \\text{und}\\quad\n\\bf{x} + \\bf{y}= \n\\begin{bmatrix}\nx_1 + y_1 \\\\\nx_2 + y_2 \\\\\n\\vdots \\\\\nx_n + y_n \\\\\n\\end{bmatrix}\n\\]","code":""},{"path":"lineare-algebra.html","id":"skalarprodukt","chapter":"3 Lineare Algebra","heading":"3.2.2 Skalarprodukt","text":"Man kann für zwei Vektoren \\(x, y \\\\mathbb{R}^{n}\\) gleicher Dimension ein spezielles Produkt bilden, das wir mit \\(\\langle\\bf{x},\\bf{y}\\rangle\\) notieren. (Zur Unterscheidung haben wir oben die Bezeichnung Multiplikation mit einem Skalar gewählt). Das Skalarprodukt ist definiert durch:\\[\n\\langle\\bf{x},\\bf{y}\\rangle =  \\sum_{=1}^{n} x_i \\cdot y_i\n\\]\nDas Skalarprodukt ist für uns deshalb wichtig weil für n=3 der Ausdruck \\(\\sqrt{\\langle\\bf{x},\\bf{x}\\rangle}\\) die Länge eines Vektors (oder den Abstand vom Nullpunkt) im euklidischen Raum angibt (Veranschaulichen Sie sich das als Übung.","code":""},{"path":"lineare-algebra.html","id":"matrix","chapter":"3 Lineare Algebra","heading":"3.3 Matrix","text":"Eine (reell-wertige) Matrix ist eine zweidimensionale, Zeilen und Spalten angeordnete Struktur von reellen Zahlen. Jedes Element einer Matrix \\(\\bf{}\\) wird über zwei Indizes bestimmt. Wir notieren eine Matrix mit einem fett gedruckten Großbuchstaben und die Elemente der Matrix mit dem Buchstaben der Matrix, aber nun nicht-fett und kursiv gedruckt und mit zwei Indizes versehen. Besteht eine Matrix aus n Zeilen und m Spalten, notieren wir das durch \\(\\bf{}\\\\mathbb{R}^{n\\times m }\\) und nennen \\(\\bf{}\\) eine Matrix mit der “Dimension n kreuz m” (als mit n Zeilen und m Spalten)\\[\n\\bf{}= \n\\begin{bmatrix}\nA_{1,1} & A_{1,2} & \\cdots & A_{1,m}  \\\\\nA_{2,1} & A_{2,2} & \\cdots & A_{2,m}  \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\nA_{n,1} & A_{n,2} & \\cdots & A_{n,m}  \\\\\n\\end{bmatrix}\n\\]","code":""},{"path":"lineare-algebra.html","id":"elementweise-addition","chapter":"3 Lineare Algebra","heading":"3.3.1 Elementweise Addition","text":"Ist \\(\\bf{B} \\\\mathbb{R}^{n\\times m }\\), also eine Matrix der gleichen Dimension, wie \\(\\bf{}\\), lässt sich die Summe \\(\\bf{+B}\\) bilden durch:\\[\n(+B)_{,j} = A_{,j} + B_{,j}\n\\]wir addieren also einfach die Elemente auf jeweiligen Positionen.","code":""},{"path":"lineare-algebra.html","id":"multiplikation-mit-skalar-und-addition","chapter":"3 Lineare Algebra","heading":"3.3.2 Multiplikation mit Skalar und Addition","text":"Die Matrix \\(\\bf{}\\) lässt sich mit einer reellen Zahl \\(s\\) (also einem Skalar) multiplizieren und die entstehende Matrix \\(\\bf{sA}\\) ist wie erwartet definiert durch\\[\n(sA)_{,j} = s \\cdot A_{,j}\n\\]wir multiplizieren also jedes Element der Matrix mit dem Skalar \\(s\\).","code":""},{"path":"lineare-algebra.html","id":"transponieren","chapter":"3 Lineare Algebra","heading":"3.3.3 Transponieren","text":"Durch Transponieren wird aus einer Matrix \\(\\bf{}\\\\mathbb{R}^{n\\times m }\\) eine neue Matrix \\(\\bf{^T} \\\\mathbb{R}^{m\\times n }\\) erzeugt. Dabei gilt\\[\n(^T)_{j,} = A_{,j}  \\quad \\text{für } \\quad \\{1,...,n}  \n\\quad \\text{und} \\quad \nj \\{1,...,m}\n\\]Transponieren lässt sich durch eine Art spiegeln von \\(\\bf{}\\) deren Hauptdiagonale verstehen. Die Hauptdiagonale ist die gedachte Linie, die vom Element \\(A_{0,0}\\) im Winkel von 45 Grad nach rechts unten verläuft. Zum Beispiel:\\[\n\\bf{} = \\begin{bmatrix}\n1 & 2  \\\\\n3 & 4  \\\\\n5 & 6  \\\\\n\\end{bmatrix}  \\\\mathbb{R}^{3\\times 2 }\n\\quad\\Rightarrow\\quad\n\\bf{^T} = \\begin{bmatrix} \n1 & 3 & 5  \\\\\n2 & 4  & 6 \\\\\n\\end{bmatrix}\n\\\\mathbb{R}^{2\\times 3 }\n\\]","code":""},{"path":"lineare-algebra.html","id":"matrixprodukt","chapter":"3 Lineare Algebra","heading":"3.3.4 Matrixprodukt","text":"Wir können zwei Matrizen \\(\\bf{}\\) und \\(\\bf{B}\\) multiplizieren, wenn die Anzahl der Zeilen B der Anzahl der Spaten entspricht. Für \\(\\bf \\\\mathbb{R}^{n\\times m }\\) und \\(\\bf B \\\\mathbb{R}^{m\\times p }\\) gilt für das Produkt \\(\\bf{C}= \\bf{ } \\bf B \\\\mathbb{R}^{n\\times p }\\)\\[\nC_{,j} = \\sum_{l=1}^m  A_{,l} B_{l,j}\n\\]","code":""},{"path":"lineare-algebra.html","id":"vektoren-als-matrix","chapter":"3 Lineare Algebra","heading":"3.3.5 Vektoren als Matrix","text":"Da wir Vektoren grafisch einer Spalte notiert haben, nennen wir sie auch Spaltenvektoren. Ein Spaltenvektor lässt sich offensichtlich als eine Matrix interpretieren, die nur aus einer Spalte besteht.\n\\[\n\\bf{x} = \n\\begin{bmatrix}\nx_1 \\\\\nx_2 \\\\\n\\vdots \\\\\nx_n \\\\\n\\end{bmatrix}\n\\\\mathbb{R}^{n \\times 1}\n\\]\nWenn wir diese Matrix, wie oben dargestellt, transponieren, entsteht eine Matrix , die nur aus einer Zeile besteht. Diese Matrix bezeichnen wir als Zeilenvektor. Die Analogie führt uns zum Konzept eines transponierten Vektors:\\[\n\\bf{x} = \n\\begin{bmatrix}\nx_1 \\\\\nx_2 \\\\\n\\vdots \\\\\nx_n \\\\\n\\end{bmatrix}\n\\\\mathbb{R}^{n \\times 1}\n\\quad\\Rightarrow\\quad\n\\bf{x^T} =  \n\\begin{bmatrix}\nx_1,  x_2 , \\dots, x_n \\\\\n\\end{bmatrix}\n\\\\mathbb{R}^{1 \\times n}\n\\]der Regel identifizieren wir \\(\\mathbb{R}^{n \\times 1}\\) und \\(\\mathbb{R}^{1 \\times n}\\), aber grundsätzlich besteht doch ein Unterschied.Betrachten wir \\(x,y\\) als \\(n \\times 1\\)-Matrix, ist\n\\[\n\\langle\\bf{x},\\bf{y}\\rangle = x^T y\n\\]Machen sie sich klar, dass obige Gleichheit keine Definition ist, sondern aus der Definition des Matrixproduktesfolgt!","code":""},{"path":"lineare-algebra.html","id":"matrix-uebung","chapter":"3 Lineare Algebra","heading":"3.4 Übungen","text":"","code":""},{"path":"lineare-algebra.html","id":"skalarprodukt-1","chapter":"3 Lineare Algebra","heading":"3.4.1 Skalarprodukt","text":"Berechnen Sie \\(\\bf{v}^T \\bf{w}\\), \\(\\bf{v}+\\bf{w}\\) und \\(2 \\cdot \\bf{v}\\) für\\[\n\\bf{v}    =   \\begin{bmatrix}\n1 \\\\\n-3 \\\\\n2\\\\\n\\end{bmatrix}\n\\quad \\text{} \\quad \n\\bf{w}    =   \\begin{bmatrix}\n1 \\\\\n0 \\\\\n13\\\\\n\\end{bmatrix}\n\\]","code":""},{"path":"lineare-algebra.html","id":"matrixprodukt-1","chapter":"3 Lineare Algebra","heading":"3.4.2 Matrixprodukt 1","text":"Berechnen sie \\(\\bf{v}\\) für\\[\n= \\begin{bmatrix} \n1 & 2 & 3 \\\\ \n7 & -1 & 2 \\\\ \n0 & 4 & -1\n\\end{bmatrix} \n\\quad \\text{} \\quad \n\\bf{v} = \\begin{bmatrix}\n 1 \\\\-3 \\\\ 2 \n\\end{bmatrix}\n\\]","code":""},{"path":"lineare-algebra.html","id":"matrixprodukt-2","chapter":"3 Lineare Algebra","heading":"3.4.3 Matrixprodukt 2","text":"Berechnen Sie \\(\\bf{v}\\bf{w}^T\\) für die beiden oben angegebenen Vektoren (Vorsicht!).","code":""},{"path":"lineare-algebra.html","id":"matrixprodukt-3","chapter":"3 Lineare Algebra","heading":"3.4.4 Matrixprodukt 3","text":"Berechnen sie \\(\\bf{}\\bf{C}\\) für\\[\n= \\begin{bmatrix} \n2 & -1 \\\\ \n4 & 0 \\\\ \n9 & 3\n\\end{bmatrix}\n\\quad\\text{und} \\quad\nC = \\begin{bmatrix} \n1 & 0 \\\\ \n4 & -1 \n\\end{bmatrix}\n\\]","code":""},{"path":"lineare-algebra.html","id":"symmetriebetrachtung","chapter":"3 Lineare Algebra","heading":"3.4.5 Symmetriebetrachtung","text":"Zur Vertiefung:\n1. Gilt für zwei Matrizen \\(\\mathbf{,B}\\\\mathbb{R}^{n\\times n }\\) die Gleichheit \\(\\bf{AB} = \\bf{BA}\\)Gilt für zwei Vektoren \\(x,y \\\\mathbb{R}^n\\) die Gleichheit: \\(\\mathbf{x}^T \\mathbf{y} = \\mathbf{y}^T\\mathbf{x}\\)?","code":""},{"path":"numpy-arrays.html","id":"numpy-arrays","chapter":"4 Numpy-Arrays","heading":"4 Numpy-Arrays","text":"","code":""},{"path":"numpy-arrays.html","id":"wofür-brauchen-wir-numpy","chapter":"4 Numpy-Arrays","heading":"4.1 Wofür brauchen wir Numpy?","text":"Numpy ist eine Python-Library7 (Bibliothek von Funktionen) für die effiziente Erzeugung, Berechnung und Bearbeitung von Daten, insbesondere numerischen Daten. Wir nutzen Numpy für den Umgang mit Vektoren, Matrizen oder Tensoren.8Wir werden Numpy nutzen, um die Datensätze für maschinelles Lernen zu bearbeiten. Eine umfangreiche und behutsame Einführung finden sie unter https://www.w3schools.com/python/numpy/. Wir besprechen diesem Abschnitt nur die für unsere Inhalte relevanten Teile.Wichtig: Beginnen Sie jeden Programmblock, dem sie numpy-Funktionen brauchen, mit der Zeile import numpy np","code":""},{"path":"numpy-arrays.html","id":"numpy-arrays-1","chapter":"4 Numpy-Arrays","heading":"4.2 Numpy-Arrays","text":"","code":""},{"path":"numpy-arrays.html","id":"vektor-mit-numpy","chapter":"4 Numpy-Arrays","heading":"4.3 Vektor mit Numpy","text":"Folgende Code zeigt, wie der erste Datensatz \\((5.1, 3.5, 1.4, 0.2) \\\\mathbb{R}^4\\) aus dem Iris-Dataset als Vektor\n\\[\n\\mathbf{x} = (5.1, 3.5, 1.4, 0.2) \\\\mathbb{R}^4\n\\]\neiner Variable mit dem Namen x erzeugt wird9.","code":""},{"path":"numpy-arrays.html","id":"beispiel","chapter":"4 Numpy-Arrays","heading":"4.3.1 Beispiel","text":"Ausgabe: Wir sehen die Darstellung des Vektors, strukturiert über eckige Klammern und den neuen Datentyp numpy.ndarray.Wir werden sehen, dass wir den aus der Mathematik gewohnten Umgang mit Vektoren (und Matrizen) einfach Numpy übertragen können.","code":"import numpy as np\nx = np.array( [5.1, 3.5, 1.4, 0.2]) \nprint( x )\nprint( type(x) )#> [5.1 3.5 1.4 0.2]\n#> <class 'numpy.ndarray'>"},{"path":"numpy-arrays.html","id":"shape-dimension","chapter":"4 Numpy-Arrays","heading":"4.3.2 Shape (Dimension)","text":"Das Attribut shape liefert die Dimension eines Arrays.Die Ausgabe (4,) bedeutet, dass die Struktur aus 4 Zahlen entlang einer Dimension besteht. (Das wird im nachfolgenden Abschnitt spannender.)","code":"import numpy as np\nx0 = np.array( [5.1, 3.5, 1.4, 0.2]) \nprint( x0.shape )#> (4,)"},{"path":"numpy-arrays.html","id":"zugriff-auf-elemente","chapter":"4 Numpy-Arrays","heading":"4.3.3 Zugriff auf Elemente","text":"Für einen Vektor \\(\\bf{x} \\\\mathbb{R}^n\\) nehmen wir auf die einzelnen Werte mittels \\(x = (x_1, ..., x_n)\\) durch Verwendung eines tiefgestellten Index Bezug. Für \\(\\mathbf{x} = (5.1, 3.5, 1.4, 0.2) \\\\mathbb{R}^4\\) ist also \\(x_1 = 5.1\\). Numpy machen wir das analog, starten die Nummerierung jedoch bei Null, wie folgendes Beispiel zeigt. Beachten sie die Analogie zu Listen Abschnitt  .Ausgabe:Übung: Geben sie das letzte Element mit dem Wert 0.2 aus.","code":"import numpy as np\nx = np.array( [5.1, 3.5, 1.4, 0.2]) \nprint( x[0] )#> 5.1"},{"path":"numpy-arrays.html","id":"werte-verändern","chapter":"4 Numpy-Arrays","heading":"4.3.4 Werte verändern","text":"Mit der Verwendung des Index können wir einzelne Einträge auch verändern. Wir sehen behandeln dazu den Ausdruck x[0] einfach als Variable und verwenden eine Wertzuweisung.Ausgabe:","code":"import numpy as np\nx = np.array( [5.1, 3.5, 1.4, 0.2]) \nx[0] = -3\nprint(x)#> [-3.   3.5  1.4  0.2]"},{"path":"numpy-arrays.html","id":"skalare-multiplikation-und-addition","chapter":"4 Numpy-Arrays","heading":"4.3.5 Skalare Multiplikation und Addition","text":"Ausgabe:","code":"import numpy as np\nx = np.array([1, 4, 9, 0])\ny = np.array([1, 0, 1, 0])\nprint(x*0.5)\nprint(x+y)\nprint(x-y)#> [0.5 2.  4.5 0. ]\n#> [ 2  4 10  0]\n#> [0 4 8 0]"},{"path":"numpy-arrays.html","id":"neue-rechenarten","chapter":"4 Numpy-Arrays","heading":"4.3.6 Neue Rechenarten","text":"Ausgabe:","code":"import numpy as np\nx = np.array([1, 4, 9, 0])\ny = np.array([1, 0, 1, 0])\n\nprint(x+1)\nprint(x*y)#> [ 2  5 10  1]\n#> [1 0 9 0]"},{"path":"numpy-arrays.html","id":"matrix-mit-numpy","chapter":"4 Numpy-Arrays","heading":"4.4 Matrix mit Numpy","text":"Matrizen werden Numpy als eine Ansammlung von Zeilenvektoren aufgebaut!","code":""},{"path":"numpy-arrays.html","id":"beispiel-1","chapter":"4 Numpy-Arrays","heading":"4.4.1 Beispiel","text":"Ausgabe:Die Indizierung der Element funktioniert erwartungsgemäß, allerdings wird mit der Zählung bei Null begonnen!","code":"import numpy as np\n\nA = np.array([[1,2],[3,4], [5,6], [7,8]])\nprint( A )\nprint( A[0,0] )\nprint( A[0,1] )#> [[1 2]\n#>  [3 4]\n#>  [5 6]\n#>  [7 8]]\n#> 1\n#> 2"},{"path":"numpy-arrays.html","id":"shape-dimension-1","chapter":"4 Numpy-Arrays","heading":"4.4.2 Shape (Dimension)","text":"Eine Matrix hat eine Anzahl von Zeilen und Spalten. Wir verwenden wie bei Vektoren shape, um die Dimension zu erfahrenAusgabe:Die Ausgabe (4,2) besagt, dass die Matrix vier Zeilen und zwei Spalten besitzt. Allgemein gesagt, dass 4 Werte entlang der ersten Dimension und 2 Werte entlang der zweiten Dimension angeordnet werden.","code":"import numpy as np\n\nA = np.array([[1,2],[3,4], [5,6], [7,8]])\nprint( A.shape )#> (4, 2)"},{"path":"numpy-arrays.html","id":"skalare-multiplikation-und-addition-1","chapter":"4 Numpy-Arrays","heading":"4.4.3 Skalare Multiplikation und Addition","text":"Ausgabe:","code":"import numpy as np\n\nA = np.array([[1,2],[3,4], [5,6], [7,8]])\nB = np.array([[10,20],[30,40], [50,60], [70,80]])\ns = 2;\nprint (2*A)     # Mulitplikation mit einem Skalar\nprint (A+B)#> [[ 2  4]\n#>  [ 6  8]\n#>  [10 12]\n#>  [14 16]]\n#> [[11 22]\n#>  [33 44]\n#>  [55 66]\n#>  [77 88]]"},{"path":"numpy-arrays.html","id":"matrixmultiplikation","chapter":"4 Numpy-Arrays","heading":"4.4.4 Matrixmultiplikation","text":"Die Matrixmultiplikation erfolgt über den Befehl np.dot. Wir berechnen als Beispiel folgendes Produkt (Immer auf die passenden shapes achten!):\\[\n\\mathbf{}= \\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{bmatrix} \\quad\\quad\\quad\n\\mathbf{B}= \\begin{bmatrix} 1 & 0 \\\\ 0 & 2 \\end{bmatrix}  \\quad\\quad\\quad\n\\mathbf{} \\mathbf{B}= \\begin{bmatrix} 1 & 4 \\\\ 3 & 8 \\\\ 5 & 12 \\end{bmatrix} \\quad\\quad\\quad\n\\]\nMit Numpy: np.dot()Ausgabe:","code":"import numpy as np\n\nA = np.array([[1,2],[3,4], [5,6] ])\nB = np.array([[1,0],[0,2]])\nAB = np.dot(A, B) \nprint( AB )#> [[ 1  4]\n#>  [ 3  8]\n#>  [ 5 12]]"},{"path":"numpy-arrays.html","id":"übungen-2","chapter":"4 Numpy-Arrays","heading":"4.4.5 Übungen","text":"Lösen sie die Aufgaben aus Abschnitt 3.4 mit geeigneten Python-Programmen.","code":""},{"path":"numpy-arrays.html","id":"allgemeine-numpy-arrays","chapter":"4 Numpy-Arrays","heading":"4.5 Allgemeine Numpy-Arrays","text":"Vektoren und Matrizen über reellen Zahlen lassen sich mit Numpy bequem darstellen.","code":""},{"path":"numpy-arrays.html","id":"d-array","chapter":"4 Numpy-Arrays","heading":"1D-Array","text":"Ein Vektor ist eine Struktur mit einer Achse. (Wir vermeiden den Begriff Dimension, weil er für Vektoren bereits belegt ist.) Entsprechend brauchen wir für einen Vektor einen Index um einen Wert zu erreichen. Diese Struktur wird Numpy 1D-Array genannt. Der Shape ist ein Tupel der Länge 1. Der Eintrag sagt uns, wie viele Werte Achse 0 enthalten sind.","code":""},{"path":"numpy-arrays.html","id":"d-array-1","chapter":"4 Numpy-Arrays","heading":"2D-Array","text":"Eine Matrix ist eine Struktur mit zwei Achsen. Entsprechend brauchen wir für eine Matrix zwei Indizes, um einen Wert zu erreichen und für eine Matrix zwei Indizes um einen Wert zu erreichen. Der Shape ist nun ein Tupel der Länge 2. Die Einträge sagen uns, wie viele Werte Achse 0 und Achse 1 enthalten sind.","code":""},{"path":"numpy-arrays.html","id":"d-array-2","chapter":"4 Numpy-Arrays","heading":"3D-Array","text":"Eine Matrix ist eine Struktur mit drei Achsen. Entsprechend brauchen wir für ein 3D-Array drei Indizes, um einen Wert zu erreichen. Der Shape ist hier ein Tupel der Länge 3. Die Einträge sagen uns, wie viele Werte den Achsen 0, 1 und 2 enthalten sind.Für uns sind 3D-Arrays relevant, zum Beispiel bei der Verarbeitung von Bildern. Wir werden darauf später noch zurückkommen.Quelle: https://medium.com/@vyasvivekj/numrical-computing--numpy-part--399adda460d8Arrays mit mehr Achsen funktionieren analog. Beachten sie, dass die Regeln für skalare Multiplikation gelten, sofern die Shapes indentisch sind!","code":""},{"path":"numpy-arrays.html","id":"beispiel-2","chapter":"4 Numpy-Arrays","heading":"Beispiel","text":"gibt folgendes Programm aus?Etwas einfacher sollte es sein, wenn sie die Erzeugung von arr etwas anders schreiben:","code":"import numpy as np\narr = np.array([\n         [ [1, 2, 3], [4, 5, 6] ], \n         [ [7, 8, 9], [10, 11, 12]]\n         ])\nprint(arr[0, 1, 2])arr = np.array([\n         [ [1, 2, 3], [4, 5, 6] ], \n         [ [7, 8, 9], [10, 11, 12]]\n         ])"},{"path":"numpy-arrays.html","id":"arrays-erzeugen","chapter":"4 Numpy-Arrays","heading":"4.6 Arrays erzeugen","text":"Bisher mussten wir Array-Werte eintippen. diesem Abschnitt lernen wir Funktionen kennen, um Arrays mit beliebigem Shape zu erzeugen","code":""},{"path":"numpy-arrays.html","id":"np.ones-und-np.zeros","chapter":"4 Numpy-Arrays","heading":"4.6.1 np.ones() und np.zeros()","text":"Ausgabe:","code":"import numpy as np\nv = np.ones( (2,3) )\nprint( v )#> [[1. 1. 1.]\n#>  [1. 1. 1.]]"},{"path":"numpy-arrays.html","id":"np.arange","chapter":"4 Numpy-Arrays","heading":"4.6.2 np.arange()","text":"Mit np.arange erzeugen wir automatisch Vektoren, die wir häufiger brauchen. Beschäftigen Sie sich mit der Ausgabe und experimentieren sie etwas, dann wird die jeweilige Funktion recht schnell klar.Ausgabe:","code":"import numpy as np\nx = np.arange(1,2,0.1)\nprint( x )\nprint( x[2] )\nprint( len(x) )\nprint ( type(x) )#> [1.  1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9]\n#> 1.2000000000000002\n#> 10\n#> <class 'numpy.ndarray'>"},{"path":"numpy-arrays.html","id":"np.linspace","chapter":"4 Numpy-Arrays","heading":"4.6.3 np.linspace()","text":"Auch hier ist die Funktionsweise recht offensichtlich.. Sie ist allerdings mit etwas Vorsicht zu genießen…Ausgabe:","code":"import numpy as np\nx = np.linspace(0,1,4);\nprint(x)\nprint( x.shape )#> [0.         0.33333333 0.66666667 1.        ]\n#> (4,)"},{"path":"numpy-arrays.html","id":"operationen-auf-arrays","chapter":"4 Numpy-Arrays","heading":"4.7 Operationen auf Arrays","text":"","code":""},{"path":"numpy-arrays.html","id":"aggregierende-operationen","chapter":"4 Numpy-Arrays","heading":"4.7.1 Aggregierende Operationen","text":"Ausgabe:","code":"import numpy as np\nx=np.array([1,2,3,4])\nprint( x.min() )\nprint( x.max() )\nprint( x.mean() )\nprint( x.sum() )#> 1\n#> 4\n#> 2.5\n#> 10"},{"path":"numpy-arrays.html","id":"elementweise-operationen","chapter":"4 Numpy-Arrays","heading":"4.7.2 Elementweise Operationen","text":"Nachfolgendes Beispiel zeigt ausgewählte Operationen. Beachten Sie diese Operationen im Mathe-Unterricht nicht gelernt haben. Sie sind jedoch recht hilfreich!Ausgabe:","code":"import numpy as np\nx = np.array([1, 4, 9, 0])\ny = np.array([1, 0, 1, 0])\n\nprint (x+1)\nprint(x*y)\nprint (np.sqrt(x))\nprint (np.sin(x))#> [ 2  5 10  1]\n#> [1 0 9 0]\n#> [1. 2. 3. 0.]\n#> [ 0.84147098 -0.7568025   0.41211849  0.        ]"},{"path":"numpy-arrays.html","id":"zufallszahlen","chapter":"4 Numpy-Arrays","heading":"4.8 Zufallszahlen","text":"","code":""},{"path":"numpy-arrays.html","id":"gleichverteilung","chapter":"4 Numpy-Arrays","heading":"4.8.1 Gleichverteilung","text":"Nachfolgende Beispiele erzeugen Gleichverteilte Zufallszahlen zwischen 3 und 4.Ausgabe:","code":"import numpy as np\nx = np.random.uniform(3,4)\nprint(x)\nx = np.random.uniform(3,4, size=(5))\nprint(x)\nx = np.random.uniform(3,4, size=(5,2))\nprint(x)#> 3.783905161167521\n#> [3.8399753  3.56915918 3.7709935  3.82623129 3.56073983]\n#> [[3.89111654 3.89581613]\n#>  [3.44582157 3.77181771]\n#>  [3.61537494 3.80976096]\n#>  [3.31854746 3.09067755]\n#>  [3.47984719 3.24337402]]"},{"path":"numpy-arrays.html","id":"normalverteilung","chapter":"4 Numpy-Arrays","heading":"4.8.2 Normalverteilung","text":"Die Kenntnis der Standardnormalverteilung wird vorausgesetzt.Ausgabe:","code":"import numpy as np\nx = np.random.normal()\nprint(x)\nmu = 5\nsigma = 1\nx = np.random.uniform(mu, sigma, size=(5))\nprint(x)\nx = np.random.uniform(mu, sigma, size=(5,2))\nprint(x)#> 2.0934775049717267\n#> [1.82295687 4.53346983 2.46545101 4.17860151 4.55891648]\n#> [[4.05783927 2.5767733 ]\n#>  [3.32599427 2.01372293]\n#>  [4.88314694 4.65786727]\n#>  [2.65837146 4.23208262]\n#>  [3.89623513 2.52472445]]"},{"path":"numpy-arrays.html","id":"konstanten","chapter":"4 Numpy-Arrays","heading":"4.8.3 Konstanten","text":"Wir brauchen hier nur für ein paar Übungen die Zahl \\(\\pi\\)Ausgabe:","code":"import numpy as np\npi_wert = np.pi\nprint( pi_wert )#> 3.141592653589793"},{"path":"numpy-arrays.html","id":"einfache-funktionen","chapter":"4 Numpy-Arrays","heading":"4.9 Einfache Funktionen","text":"Ausgabe:–>","code":"import numpy as np\n\n# Sinus\nx = np.sin(0)\nprint( x )\n\n# Quadrieren\nx = np.square(3)\nprint( x )\n\n# PI\nx = np.pi\nprint( x )\n\n# Eulersche Zahl\nx = np.e\nprint( x )#> 0.0\n#> 9\n#> 3.141592653589793\n#> 2.718281828459045"},{"path":"dataframes.html","id":"dataframes","chapter":"5 Dataframes","heading":"5 Dataframes","text":"Ein Dataframe ist eine Tabellenstruktur von Daten (ähnlich zu Excel) mit Spaltenüberschriften und Zeilenbezeichnungen (der Regel Zeilennummern). Viele Datensätze im Machine Learning liegen als Datentabellen vor und können daher mit Dataframes gut verarbeitet werden.Wir können damit einzelne Werten, Spalten oder Zeilen direkt über den Namen ansprechen und die über Numpy hinaus gehenden Analysefunktionen benutzen. Numerische Spalten oder Zeilen lassen sich Numpy-Arrays konvertieren, dass wir alle Numpy-Funktionen zur Verfügung haben.","code":""},{"path":"dataframes.html","id":"grundlagen","chapter":"5 Dataframes","heading":"5.1 Grundlagen","text":"","code":""},{"path":"dataframes.html","id":"beispiel-3","chapter":"5 Dataframes","heading":"5.1.1 Beispiel","text":"Ausgabe:","code":"import pandas as pd\ndf = pd.DataFrame({\n   \"Name\": [\"Braund, Mr. Owen Harris\",\n            \"Allen, Mr. William Henry\",\n          \"Bonnell, Miss. Elizabeth\",\n          \"Petty, Tom\"],\n    \"Age\": [22, 62, 58, 26],\n   \"Gender\": [\"male\", \"male\", \"female\", \"female\"]}\n  )\nprint( df ) # Dataframe ausgeben#>                        Name  Age  Gender\n#> 0   Braund, Mr. Owen Harris   22    male\n#> 1  Allen, Mr. William Henry   62    male\n#> 2  Bonnell, Miss. Elizabeth   58  female\n#> 3                Petty, Tom   26  female"},{"path":"dataframes.html","id":"überblick-verschaffen","chapter":"5 Dataframes","heading":"5.1.2 Überblick verschaffen","text":"Um sich einen weiteren Überlick über die Daten zu verschaffen sind folgende Funktionen hilfreich.info().describe()Ausgabe:Einfache StatistikMit df.describe() erhalten wir eine einfache Statistische Auswertung aller Spalten mit numerischem Datentyp.Ausgabe:","code":"import pandas as pd\ndf = pd.DataFrame({\n   \"Name\": [\"Braund, Mr. Owen Harris\",\n            \"Allen, Mr. William Henry\",\n          \"Bonnell, Miss. Elizabeth\",\n          \"Petty, Tom\"],\n    \"Age\": [22, 62, 58, 26],\n   \"Gender\": [\"male\", \"male\", \"female\", \"female\"]}\n  )\ndf.info()#> <class 'pandas.core.frame.DataFrame'>\n#> RangeIndex: 4 entries, 0 to 3\n#> Data columns (total 3 columns):\n#>  #   Column  Non-Null Count  Dtype \n#> ---  ------  --------------  ----- \n#>  0   Name    4 non-null      object\n#>  1   Age     4 non-null      int64 \n#>  2   Gender  4 non-null      object\n#> dtypes: int64(1), object(2)\n#> memory usage: 224.0+ bytesimport pandas as pd\ndf = pd.DataFrame({\n   \"Name\": [\"Braund, Mr. Owen Harris\",\n            \"Allen, Mr. William Henry\",\n          \"Bonnell, Miss. Elizabeth\",\n          \"Petty, Tom\"],\n    \"Age\": [22, 62, 58, 26],\n   \"Gender\": [\"male\", \"male\", \"female\", \"female\"]}\n  )\ndf.describe()#>              Age\n#> count   4.000000\n#> mean   42.000000\n#> std    20.912516\n#> min    22.000000\n#> 25%    25.000000\n#> 50%    42.000000\n#> 75%    59.000000\n#> max    62.000000"},{"path":"dataframes.html","id":"spalten-auswählen","chapter":"5 Dataframes","heading":"5.1.3 Spalten auswählen","text":"Ausgabe:","code":"import pandas as pd\ndf = pd.DataFrame({\n   \"Name\": [\"Braund, Mr. Owen Harris\",\n            \"Allen, Mr. William Henry\",\n          \"Bonnell, Miss. Elizabeth\",\n          \"Petty, Tom\"],\n    \"Age\": [22, 62, 58, 26],\n   \"Gender\": [\"male\", \"male\", \"female\", \"female\"]}\n  )\n\nteil_df = df[[\"Age\", \"Gender\"]]\nprint ( teil_df )#>    Age  Gender\n#> 0   22    male\n#> 1   62    male\n#> 2   58  female\n#> 3   26  female"},{"path":"dataframes.html","id":"numpy-array-aus-dataframe-erzeugen","chapter":"5 Dataframes","heading":"5.1.4 Numpy-Array aus Dataframe erzeugen","text":"Ausgabe:","code":"import pandas as pd\ndf = pd.DataFrame({\n   \"Name\": [\"Braund, Mr. Owen Harris\",\n            \"Allen, Mr. William Henry\",\n          \"Bonnell, Miss. Elizabeth\",\n          \"Petty, Tom\"],\n    \"Age\": [22, 62, 58, 26],\n   \"Gender\": [\"male\", \"male\", \"female\", \"female\"]}\n  )\n\nteil_df = df[[\"Age\"]]\narr = teil_df.to_numpy()\nprint( arr )\nprint(\"\\nType  : \", type(arr))\nprint(\"Shape : \", arr.shape)#> [[22]\n#>  [62]\n#>  [58]\n#>  [26]]\n#> \n#> Type  :  <class 'numpy.ndarray'>\n#> Shape :  (4, 1)"},{"path":"dataframes.html","id":"dataframe-aus-numpy-array-erzeugen","chapter":"5 Dataframes","heading":"5.1.5 Dataframe aus Numpy-Array erzeugen","text":"Ausgabe:","code":"import numpy as np\nimport pandas as pd\nA = np.array([[1, 2], [3.1, -4.2]])\ndf2 = pd.DataFrame(data=A, index=[\"Zeile 1\", \"Zeile 2\"], columns=[\"Spalte 1\",\"Spalte 2\"])\nprint( df2 )#>          Spalte 1  Spalte 2\n#> Zeile 1       1.0       2.0\n#> Zeile 2       3.1      -4.2"},{"path":"dataframes.html","id":"spaltennamen-ändern","chapter":"5 Dataframes","heading":"5.1.6 Spaltennamen ändern","text":"Wir werden wenigen Stelen die Spaltennamen eines Dataframes ändern müssen. Dies ist zwar ein Detailopertation, aber der Vollständigkeit halber führen wir sie hier auf. Entscheinden ist die mit <– markierte Zeile.Ausgabe:","code":"import pandas as pd\ndf = pd.DataFrame({\n   \"Name\": [\"Braund, Mr. Owen Harris\",\n            \"Allen, Mr. William Henry\",\n          \"Bonnell, Miss. Elizabeth\",\n          \"Petty, Tom\"],\n    \"Age\": [22, 62, 58, 26],\n   \"Gender\": [\"male\", \"male\", \"female\", \"female\"]}\n  )\n\nprint( df.head(3) )\ndf.columns=[\"Nachname\", \"Alter\", \"Geschlecht\"] # <-- Änderung\nprint(\" \\nNach Änderung : \")\nprint( df.head(3) )#>                        Name  Age  Gender\n#> 0   Braund, Mr. Owen Harris   22    male\n#> 1  Allen, Mr. William Henry   62    male\n#> 2  Bonnell, Miss. Elizabeth   58  female\n#>  \n#> Nach Änderung :\n#>                    Nachname  Alter Geschlecht\n#> 0   Braund, Mr. Owen Harris     22       male\n#> 1  Allen, Mr. William Henry     62       male\n#> 2  Bonnell, Miss. Elizabeth     58     female"}]
